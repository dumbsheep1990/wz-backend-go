// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: api/rpc/search.proto

package search

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Search_SearchContent_FullMethodName   = "/search.Search/SearchContent"
	Search_GetSuggestions_FullMethodName  = "/search.Search/GetSuggestions"
	Search_GetHotSearches_FullMethodName  = "/search.Search/GetHotSearches"
	Search_AddHotSearch_FullMethodName    = "/search.Search/AddHotSearch"
	Search_DeleteHotSearch_FullMethodName = "/search.Search/DeleteHotSearch"
	Search_LogSearchQuery_FullMethodName  = "/search.Search/LogSearchQuery"
	Search_GetSearchLogs_FullMethodName   = "/search.Search/GetSearchLogs"
)

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 搜索服务提供核心搜索功能
type SearchClient interface {
	// 全文搜索
	SearchContent(ctx context.Context, in *SearchContentRequest, opts ...grpc.CallOption) (*SearchContentResponse, error)
	// 搜索推荐
	GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsResponse, error)
	// 获取热搜词
	GetHotSearches(ctx context.Context, in *GetHotSearchesRequest, opts ...grpc.CallOption) (*GetHotSearchesResponse, error)
	// 管理热搜词
	AddHotSearch(ctx context.Context, in *AddHotSearchRequest, opts ...grpc.CallOption) (*AddHotSearchResponse, error)
	DeleteHotSearch(ctx context.Context, in *DeleteHotSearchRequest, opts ...grpc.CallOption) (*DeleteHotSearchResponse, error)
	// 搜索日志管理
	LogSearchQuery(ctx context.Context, in *LogSearchQueryRequest, opts ...grpc.CallOption) (*LogSearchQueryResponse, error)
	GetSearchLogs(ctx context.Context, in *GetSearchLogsRequest, opts ...grpc.CallOption) (*GetSearchLogsResponse, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) SearchContent(ctx context.Context, in *SearchContentRequest, opts ...grpc.CallOption) (*SearchContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchContentResponse)
	err := c.cc.Invoke(ctx, Search_SearchContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSuggestionsResponse)
	err := c.cc.Invoke(ctx, Search_GetSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetHotSearches(ctx context.Context, in *GetHotSearchesRequest, opts ...grpc.CallOption) (*GetHotSearchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotSearchesResponse)
	err := c.cc.Invoke(ctx, Search_GetHotSearches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) AddHotSearch(ctx context.Context, in *AddHotSearchRequest, opts ...grpc.CallOption) (*AddHotSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddHotSearchResponse)
	err := c.cc.Invoke(ctx, Search_AddHotSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) DeleteHotSearch(ctx context.Context, in *DeleteHotSearchRequest, opts ...grpc.CallOption) (*DeleteHotSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHotSearchResponse)
	err := c.cc.Invoke(ctx, Search_DeleteHotSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) LogSearchQuery(ctx context.Context, in *LogSearchQueryRequest, opts ...grpc.CallOption) (*LogSearchQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogSearchQueryResponse)
	err := c.cc.Invoke(ctx, Search_LogSearchQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetSearchLogs(ctx context.Context, in *GetSearchLogsRequest, opts ...grpc.CallOption) (*GetSearchLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchLogsResponse)
	err := c.cc.Invoke(ctx, Search_GetSearchLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
// All implementations must embed UnimplementedSearchServer
// for forward compatibility.
//
// 搜索服务提供核心搜索功能
type SearchServer interface {
	// 全文搜索
	SearchContent(context.Context, *SearchContentRequest) (*SearchContentResponse, error)
	// 搜索推荐
	GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsResponse, error)
	// 获取热搜词
	GetHotSearches(context.Context, *GetHotSearchesRequest) (*GetHotSearchesResponse, error)
	// 管理热搜词
	AddHotSearch(context.Context, *AddHotSearchRequest) (*AddHotSearchResponse, error)
	DeleteHotSearch(context.Context, *DeleteHotSearchRequest) (*DeleteHotSearchResponse, error)
	// 搜索日志管理
	LogSearchQuery(context.Context, *LogSearchQueryRequest) (*LogSearchQueryResponse, error)
	GetSearchLogs(context.Context, *GetSearchLogsRequest) (*GetSearchLogsResponse, error)
	mustEmbedUnimplementedSearchServer()
}

// UnimplementedSearchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchServer struct{}

func (UnimplementedSearchServer) SearchContent(context.Context, *SearchContentRequest) (*SearchContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContent not implemented")
}
func (UnimplementedSearchServer) GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestions not implemented")
}
func (UnimplementedSearchServer) GetHotSearches(context.Context, *GetHotSearchesRequest) (*GetHotSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotSearches not implemented")
}
func (UnimplementedSearchServer) AddHotSearch(context.Context, *AddHotSearchRequest) (*AddHotSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotSearch not implemented")
}
func (UnimplementedSearchServer) DeleteHotSearch(context.Context, *DeleteHotSearchRequest) (*DeleteHotSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHotSearch not implemented")
}
func (UnimplementedSearchServer) LogSearchQuery(context.Context, *LogSearchQueryRequest) (*LogSearchQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogSearchQuery not implemented")
}
func (UnimplementedSearchServer) GetSearchLogs(context.Context, *GetSearchLogsRequest) (*GetSearchLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchLogs not implemented")
}
func (UnimplementedSearchServer) mustEmbedUnimplementedSearchServer() {}
func (UnimplementedSearchServer) testEmbeddedByValue()                {}

// UnsafeSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServer will
// result in compilation errors.
type UnsafeSearchServer interface {
	mustEmbedUnimplementedSearchServer()
}

func RegisterSearchServer(s grpc.ServiceRegistrar, srv SearchServer) {
	// If the following call pancis, it indicates UnimplementedSearchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Search_ServiceDesc, srv)
}

func _Search_SearchContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SearchContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_SearchContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SearchContent(ctx, req.(*SearchContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_GetSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetSuggestions(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetHotSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotSearchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetHotSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_GetHotSearches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetHotSearches(ctx, req.(*GetHotSearchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_AddHotSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).AddHotSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_AddHotSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).AddHotSearch(ctx, req.(*AddHotSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_DeleteHotSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHotSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).DeleteHotSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_DeleteHotSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).DeleteHotSearch(ctx, req.(*DeleteHotSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_LogSearchQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogSearchQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).LogSearchQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_LogSearchQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).LogSearchQuery(ctx, req.(*LogSearchQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetSearchLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetSearchLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Search_GetSearchLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetSearchLogs(ctx, req.(*GetSearchLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Search_ServiceDesc is the grpc.ServiceDesc for Search service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Search_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchContent",
			Handler:    _Search_SearchContent_Handler,
		},
		{
			MethodName: "GetSuggestions",
			Handler:    _Search_GetSuggestions_Handler,
		},
		{
			MethodName: "GetHotSearches",
			Handler:    _Search_GetHotSearches_Handler,
		},
		{
			MethodName: "AddHotSearch",
			Handler:    _Search_AddHotSearch_Handler,
		},
		{
			MethodName: "DeleteHotSearch",
			Handler:    _Search_DeleteHotSearch_Handler,
		},
		{
			MethodName: "LogSearchQuery",
			Handler:    _Search_LogSearchQuery_Handler,
		},
		{
			MethodName: "GetSearchLogs",
			Handler:    _Search_GetSearchLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rpc/search.proto",
}
