// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: ai.proto

package aiclient

import (
	"context"

	"wz-backend-go/api/rpc/ai"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatRequest           = ai.ChatRequest
	ChatResponse          = ai.ChatResponse
	ContentReviewRequest  = ai.ContentReviewRequest
	ContentReviewResponse = ai.ContentReviewResponse
	RecommendItem         = ai.RecommendItem
	RecommendRequest      = ai.RecommendRequest
	RecommendResponse     = ai.RecommendResponse

	AI interface {
		// 获取推荐内容
		Recommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*RecommendResponse, error)
		// 内容审核
		ContentReview(ctx context.Context, in *ContentReviewRequest, opts ...grpc.CallOption) (*ContentReviewResponse, error)
		// 客服对话
		Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	}

	defaultAI struct {
		cli zrpc.Client
	}
)

func NewAI(cli zrpc.Client) AI {
	return &defaultAI{
		cli: cli,
	}
}

// 获取推荐内容
func (m *defaultAI) Recommend(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*RecommendResponse, error) {
	client := ai.NewAIClient(m.cli.Conn())
	return client.Recommend(ctx, in, opts...)
}

// 内容审核
func (m *defaultAI) ContentReview(ctx context.Context, in *ContentReviewRequest, opts ...grpc.CallOption) (*ContentReviewResponse, error) {
	client := ai.NewAIClient(m.cli.Conn())
	return client.ContentReview(ctx, in, opts...)
}

// 客服对话
func (m *defaultAI) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	client := ai.NewAIClient(m.cli.Conn())
	return client.Chat(ctx, in, opts...)
}
