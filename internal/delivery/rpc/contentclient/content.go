// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: content.proto

package contentclient

import (
	"context"

	"wz-backend-go/api/rpc/content"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Category                    = content.Category
	ContentStatus               = content.ContentStatus
	CreateCategoryRequest       = content.CreateCategoryRequest
	CreateCategoryResponse      = content.CreateCategoryResponse
	CreatePostRequest           = content.CreatePostRequest
	CreatePostResponse          = content.CreatePostResponse
	CreateReviewRequest         = content.CreateReviewRequest
	CreateReviewResponse        = content.CreateReviewResponse
	DeleteCategoryRequest       = content.DeleteCategoryRequest
	DeleteCategoryResponse      = content.DeleteCategoryResponse
	DeletePostRequest           = content.DeletePostRequest
	DeletePostResponse          = content.DeletePostResponse
	DeleteReviewRequest         = content.DeleteReviewRequest
	DeleteReviewResponse        = content.DeleteReviewResponse
	GetCategoryRequest          = content.GetCategoryRequest
	GetCategoryResponse         = content.GetCategoryResponse
	GetContentStatusRequest     = content.GetContentStatusRequest
	GetContentStatusResponse    = content.GetContentStatusResponse
	GetHotContentRequest        = content.GetHotContentRequest
	GetHotContentResponse       = content.GetHotContentResponse
	GetPostRequest              = content.GetPostRequest
	GetPostResponse             = content.GetPostResponse
	GetReviewRequest            = content.GetReviewRequest
	GetReviewResponse           = content.GetReviewResponse
	HotContent                  = content.HotContent
	ListCategoriesRequest       = content.ListCategoriesRequest
	ListCategoriesResponse      = content.ListCategoriesResponse
	ListPostsRequest            = content.ListPostsRequest
	ListPostsResponse           = content.ListPostsResponse
	ListReviewsRequest          = content.ListReviewsRequest
	ListReviewsResponse         = content.ListReviewsResponse
	Post                        = content.Post
	Review                      = content.Review
	SetHotContentRequest        = content.SetHotContentRequest
	SetHotContentResponse       = content.SetHotContentResponse
	UpdateCategoryRequest       = content.UpdateCategoryRequest
	UpdateCategoryResponse      = content.UpdateCategoryResponse
	UpdateContentStatusRequest  = content.UpdateContentStatusRequest
	UpdateContentStatusResponse = content.UpdateContentStatusResponse
	UpdatePostRequest           = content.UpdatePostRequest
	UpdatePostResponse          = content.UpdatePostResponse
	UpdateReviewRequest         = content.UpdateReviewRequest
	UpdateReviewResponse        = content.UpdateReviewResponse

	Content interface {
		// 分类管理
		CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
		UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error)
		DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
		GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error)
		ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
		// 帖子管理
		CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
		UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
		DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
		GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
		ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error)
		// 评论管理
		CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error)
		UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*UpdateReviewResponse, error)
		DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error)
		GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*GetReviewResponse, error)
		ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error)
		// 内容状态管理
		UpdateContentStatus(ctx context.Context, in *UpdateContentStatusRequest, opts ...grpc.CallOption) (*UpdateContentStatusResponse, error)
		GetContentStatus(ctx context.Context, in *GetContentStatusRequest, opts ...grpc.CallOption) (*GetContentStatusResponse, error)
		// 热门内容管理
		GetHotContent(ctx context.Context, in *GetHotContentRequest, opts ...grpc.CallOption) (*GetHotContentResponse, error)
		SetHotContent(ctx context.Context, in *SetHotContentRequest, opts ...grpc.CallOption) (*SetHotContentResponse, error)
	}

	defaultContent struct {
		cli zrpc.Client
	}
)

func NewContent(cli zrpc.Client) Content {
	return &defaultContent{
		cli: cli,
	}
}

// 分类管理
func (m *defaultContent) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.CreateCategory(ctx, in, opts...)
}

func (m *defaultContent) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*UpdateCategoryResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.UpdateCategory(ctx, in, opts...)
}

func (m *defaultContent) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.DeleteCategory(ctx, in, opts...)
}

func (m *defaultContent) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*GetCategoryResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.GetCategory(ctx, in, opts...)
}

func (m *defaultContent) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.ListCategories(ctx, in, opts...)
}

// 帖子管理
func (m *defaultContent) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.CreatePost(ctx, in, opts...)
}

func (m *defaultContent) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.UpdatePost(ctx, in, opts...)
}

func (m *defaultContent) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.DeletePost(ctx, in, opts...)
}

func (m *defaultContent) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.GetPost(ctx, in, opts...)
}

func (m *defaultContent) ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.ListPosts(ctx, in, opts...)
}

// 评论管理
func (m *defaultContent) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.CreateReview(ctx, in, opts...)
}

func (m *defaultContent) UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*UpdateReviewResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.UpdateReview(ctx, in, opts...)
}

func (m *defaultContent) DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.DeleteReview(ctx, in, opts...)
}

func (m *defaultContent) GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*GetReviewResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.GetReview(ctx, in, opts...)
}

func (m *defaultContent) ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.ListReviews(ctx, in, opts...)
}

// 内容状态管理
func (m *defaultContent) UpdateContentStatus(ctx context.Context, in *UpdateContentStatusRequest, opts ...grpc.CallOption) (*UpdateContentStatusResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.UpdateContentStatus(ctx, in, opts...)
}

func (m *defaultContent) GetContentStatus(ctx context.Context, in *GetContentStatusRequest, opts ...grpc.CallOption) (*GetContentStatusResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.GetContentStatus(ctx, in, opts...)
}

// 热门内容管理
func (m *defaultContent) GetHotContent(ctx context.Context, in *GetHotContentRequest, opts ...grpc.CallOption) (*GetHotContentResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.GetHotContent(ctx, in, opts...)
}

func (m *defaultContent) SetHotContent(ctx context.Context, in *SetHotContentRequest, opts ...grpc.CallOption) (*SetHotContentResponse, error) {
	client := content.NewContentClient(m.cli.Conn())
	return client.SetHotContent(ctx, in, opts...)
}
