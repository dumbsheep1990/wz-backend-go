// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: file.proto

package fileclient

import (
	"context"

	"wz-backend-go/api/rpc/file"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteFileRequest  = file.DeleteFileRequest
	DeleteFileResponse = file.DeleteFileResponse
	FileInfo           = file.FileInfo
	GetFileRequest     = file.GetFileRequest
	GetFileResponse    = file.GetFileResponse
	ListFilesRequest   = file.ListFilesRequest
	ListFilesResponse  = file.ListFilesResponse
	UploadRequest      = file.UploadRequest
	UploadResponse     = file.UploadResponse

	File interface {
		// 上传文件
		Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
		// 获取文件信息
		GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
		// 删除文件
		DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
		// 获取文件列表
		ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	}

	defaultFile struct {
		cli zrpc.Client
	}
)

func NewFile(cli zrpc.Client) File {
	return &defaultFile{
		cli: cli,
	}
}

// 上传文件
func (m *defaultFile) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.Upload(ctx, in, opts...)
}

// 获取文件信息
func (m *defaultFile) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.GetFile(ctx, in, opts...)
}

// 删除文件
func (m *defaultFile) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.DeleteFile(ctx, in, opts...)
}

// 获取文件列表
func (m *defaultFile) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.ListFiles(ctx, in, opts...)
}
