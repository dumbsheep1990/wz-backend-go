// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: interaction.proto

package interactionclient

import (
	"context"

	"wz-backend-go/internal/delivery/rpc/interaction/interaction"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentRequest       = interaction.CommentRequest
	CommentResponse      = interaction.CommentResponse
	DeleteCommentRequest = interaction.DeleteCommentRequest
	FollowRequest        = interaction.FollowRequest
	FollowResponse       = interaction.FollowResponse
	LikeRequest          = interaction.LikeRequest
	LikeResponse         = interaction.LikeResponse
	ReportRequest        = interaction.ReportRequest
	ReportResponse       = interaction.ReportResponse

	Interaction interface {
		// 点赞
		Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error)
		// 取消点赞
		Unlike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error)
		// 发表评论
		Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
		// 删除评论
		DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
		// 关注
		Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
		// 取消关注
		Unfollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
		// 举报
		Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	}

	defaultInteraction struct {
		cli zrpc.Client
	}
)

func NewInteraction(cli zrpc.Client) Interaction {
	return &defaultInteraction{
		cli: cli,
	}
}

// 点赞
func (m *defaultInteraction) Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error) {
	client := interaction.NewInteractionClient(m.cli.Conn())
	return client.Like(ctx, in, opts...)
}

// 取消点赞
func (m *defaultInteraction) Unlike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error) {
	client := interaction.NewInteractionClient(m.cli.Conn())
	return client.Unlike(ctx, in, opts...)
}

// 发表评论
func (m *defaultInteraction) Comment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	client := interaction.NewInteractionClient(m.cli.Conn())
	return client.Comment(ctx, in, opts...)
}

// 删除评论
func (m *defaultInteraction) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	client := interaction.NewInteractionClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}

// 关注
func (m *defaultInteraction) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	client := interaction.NewInteractionClient(m.cli.Conn())
	return client.Follow(ctx, in, opts...)
}

// 取消关注
func (m *defaultInteraction) Unfollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	client := interaction.NewInteractionClient(m.cli.Conn())
	return client.Unfollow(ctx, in, opts...)
}

// 举报
func (m *defaultInteraction) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	client := interaction.NewInteractionClient(m.cli.Conn())
	return client.Report(ctx, in, opts...)
}
