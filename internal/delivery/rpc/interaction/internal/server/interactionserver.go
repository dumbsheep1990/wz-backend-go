// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: interaction.proto

package server

import (
	"context"

	"wz-backend-go/internal/delivery/rpc/interaction/interaction"
	"wz-backend-go/internal/delivery/rpc/interaction/internal/logic"
	"wz-backend-go/internal/delivery/rpc/interaction/internal/svc"
)

type InteractionServer struct {
	svcCtx *svc.ServiceContext
	interaction.UnimplementedInteractionServer
}

func NewInteractionServer(svcCtx *svc.ServiceContext) *InteractionServer {
	return &InteractionServer{
		svcCtx: svcCtx,
	}
}

// 点赞
func (s *InteractionServer) Like(ctx context.Context, in *interaction.LikeRequest) (*interaction.LikeResponse, error) {
	l := logic.NewLikeLogic(ctx, s.svcCtx)
	return l.Like(in)
}

// 取消点赞
func (s *InteractionServer) Unlike(ctx context.Context, in *interaction.LikeRequest) (*interaction.LikeResponse, error) {
	l := logic.NewUnlikeLogic(ctx, s.svcCtx)
	return l.Unlike(in)
}

// 发表评论
func (s *InteractionServer) Comment(ctx context.Context, in *interaction.CommentRequest) (*interaction.CommentResponse, error) {
	l := logic.NewCommentLogic(ctx, s.svcCtx)
	return l.Comment(in)
}

// 删除评论
func (s *InteractionServer) DeleteComment(ctx context.Context, in *interaction.DeleteCommentRequest) (*interaction.CommentResponse, error) {
	l := logic.NewDeleteCommentLogic(ctx, s.svcCtx)
	return l.DeleteComment(in)
}

// 关注
func (s *InteractionServer) Follow(ctx context.Context, in *interaction.FollowRequest) (*interaction.FollowResponse, error) {
	l := logic.NewFollowLogic(ctx, s.svcCtx)
	return l.Follow(in)
}

// 取消关注
func (s *InteractionServer) Unfollow(ctx context.Context, in *interaction.FollowRequest) (*interaction.FollowResponse, error) {
	l := logic.NewUnfollowLogic(ctx, s.svcCtx)
	return l.Unfollow(in)
}

// 举报
func (s *InteractionServer) Report(ctx context.Context, in *interaction.ReportRequest) (*interaction.ReportResponse, error) {
	l := logic.NewReportLogic(ctx, s.svcCtx)
	return l.Report(in)
}
