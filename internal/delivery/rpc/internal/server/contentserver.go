// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: content.proto

package server

import (
	"context"

	"wz-backend-go/api/rpc/content"
	"wz-backend-go/internal/delivery/rpc/internal/logic"
	"wz-backend-go/internal/delivery/rpc/internal/svc"
)

type ContentServer struct {
	svcCtx *svc.ServiceContext
	content.UnimplementedContentServer
}

func NewContentServer(svcCtx *svc.ServiceContext) *ContentServer {
	return &ContentServer{
		svcCtx: svcCtx,
	}
}

// 分类管理
func (s *ContentServer) CreateCategory(ctx context.Context, in *content.CreateCategoryRequest) (*content.CreateCategoryResponse, error) {
	l := logic.NewCreateCategoryLogic(ctx, s.svcCtx)
	return l.CreateCategory(in)
}

func (s *ContentServer) UpdateCategory(ctx context.Context, in *content.UpdateCategoryRequest) (*content.UpdateCategoryResponse, error) {
	l := logic.NewUpdateCategoryLogic(ctx, s.svcCtx)
	return l.UpdateCategory(in)
}

func (s *ContentServer) DeleteCategory(ctx context.Context, in *content.DeleteCategoryRequest) (*content.DeleteCategoryResponse, error) {
	l := logic.NewDeleteCategoryLogic(ctx, s.svcCtx)
	return l.DeleteCategory(in)
}

func (s *ContentServer) GetCategory(ctx context.Context, in *content.GetCategoryRequest) (*content.GetCategoryResponse, error) {
	l := logic.NewGetCategoryLogic(ctx, s.svcCtx)
	return l.GetCategory(in)
}

func (s *ContentServer) ListCategories(ctx context.Context, in *content.ListCategoriesRequest) (*content.ListCategoriesResponse, error) {
	l := logic.NewListCategoriesLogic(ctx, s.svcCtx)
	return l.ListCategories(in)
}

// 帖子管理
func (s *ContentServer) CreatePost(ctx context.Context, in *content.CreatePostRequest) (*content.CreatePostResponse, error) {
	l := logic.NewCreatePostLogic(ctx, s.svcCtx)
	return l.CreatePost(in)
}

func (s *ContentServer) UpdatePost(ctx context.Context, in *content.UpdatePostRequest) (*content.UpdatePostResponse, error) {
	l := logic.NewUpdatePostLogic(ctx, s.svcCtx)
	return l.UpdatePost(in)
}

func (s *ContentServer) DeletePost(ctx context.Context, in *content.DeletePostRequest) (*content.DeletePostResponse, error) {
	l := logic.NewDeletePostLogic(ctx, s.svcCtx)
	return l.DeletePost(in)
}

func (s *ContentServer) GetPost(ctx context.Context, in *content.GetPostRequest) (*content.GetPostResponse, error) {
	l := logic.NewGetPostLogic(ctx, s.svcCtx)
	return l.GetPost(in)
}

func (s *ContentServer) ListPosts(ctx context.Context, in *content.ListPostsRequest) (*content.ListPostsResponse, error) {
	l := logic.NewListPostsLogic(ctx, s.svcCtx)
	return l.ListPosts(in)
}

// 评论管理
func (s *ContentServer) CreateReview(ctx context.Context, in *content.CreateReviewRequest) (*content.CreateReviewResponse, error) {
	l := logic.NewCreateReviewLogic(ctx, s.svcCtx)
	return l.CreateReview(in)
}

func (s *ContentServer) UpdateReview(ctx context.Context, in *content.UpdateReviewRequest) (*content.UpdateReviewResponse, error) {
	l := logic.NewUpdateReviewLogic(ctx, s.svcCtx)
	return l.UpdateReview(in)
}

func (s *ContentServer) DeleteReview(ctx context.Context, in *content.DeleteReviewRequest) (*content.DeleteReviewResponse, error) {
	l := logic.NewDeleteReviewLogic(ctx, s.svcCtx)
	return l.DeleteReview(in)
}

func (s *ContentServer) GetReview(ctx context.Context, in *content.GetReviewRequest) (*content.GetReviewResponse, error) {
	l := logic.NewGetReviewLogic(ctx, s.svcCtx)
	return l.GetReview(in)
}

func (s *ContentServer) ListReviews(ctx context.Context, in *content.ListReviewsRequest) (*content.ListReviewsResponse, error) {
	l := logic.NewListReviewsLogic(ctx, s.svcCtx)
	return l.ListReviews(in)
}

// 内容状态管理
func (s *ContentServer) UpdateContentStatus(ctx context.Context, in *content.UpdateContentStatusRequest) (*content.UpdateContentStatusResponse, error) {
	l := logic.NewUpdateContentStatusLogic(ctx, s.svcCtx)
	return l.UpdateContentStatus(in)
}

func (s *ContentServer) GetContentStatus(ctx context.Context, in *content.GetContentStatusRequest) (*content.GetContentStatusResponse, error) {
	l := logic.NewGetContentStatusLogic(ctx, s.svcCtx)
	return l.GetContentStatus(in)
}

// 热门内容管理
func (s *ContentServer) GetHotContent(ctx context.Context, in *content.GetHotContentRequest) (*content.GetHotContentResponse, error) {
	l := logic.NewGetHotContentLogic(ctx, s.svcCtx)
	return l.GetHotContent(in)
}

func (s *ContentServer) SetHotContent(ctx context.Context, in *content.SetHotContentRequest) (*content.SetHotContentResponse, error) {
	l := logic.NewSetHotContentLogic(ctx, s.svcCtx)
	return l.SetHotContent(in)
}
