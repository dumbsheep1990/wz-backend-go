// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: notification.proto

package server

import (
	"context"

	"wz-backend-go/api/rpc/notification"
	"wz-backend-go/internal/delivery/rpc/internal/logic"
	"wz-backend-go/internal/delivery/rpc/internal/svc"
)

type NotificationServer struct {
	svcCtx *svc.ServiceContext
	notification.UnimplementedNotificationServer
}

func NewNotificationServer(svcCtx *svc.ServiceContext) *NotificationServer {
	return &NotificationServer{
		svcCtx: svcCtx,
	}
}

// 发送通知
func (s *NotificationServer) Send(ctx context.Context, in *notification.SendRequest) (*notification.SendResponse, error) {
	l := logic.NewSendLogic(ctx, s.svcCtx)
	return l.Send(in)
}

// 获取通知列表
func (s *NotificationServer) List(ctx context.Context, in *notification.ListRequest) (*notification.ListResponse, error) {
	l := logic.NewListLogic(ctx, s.svcCtx)
	return l.List(in)
}

// 标记通知为已读
func (s *NotificationServer) MarkRead(ctx context.Context, in *notification.MarkReadRequest) (*notification.MarkReadResponse, error) {
	l := logic.NewMarkReadLogic(ctx, s.svcCtx)
	return l.MarkRead(in)
}
