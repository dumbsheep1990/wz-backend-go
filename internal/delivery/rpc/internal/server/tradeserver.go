// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: trade.proto

package server

import (
	"context"

	"wz-backend-go/api/rpc/trade"
	"wz-backend-go/internal/delivery/rpc/internal/logic"
	"wz-backend-go/internal/delivery/rpc/internal/svc"
)

type TradeServer struct {
	svcCtx *svc.ServiceContext
	trade.UnimplementedTradeServer
}

func NewTradeServer(svcCtx *svc.ServiceContext) *TradeServer {
	return &TradeServer{
		svcCtx: svcCtx,
	}
}

// 订单管理
func (s *TradeServer) CreateOrder(ctx context.Context, in *trade.CreateOrderRequest) (*trade.CreateOrderResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

func (s *TradeServer) GetOrder(ctx context.Context, in *trade.GetOrderRequest) (*trade.GetOrderResponse, error) {
	l := logic.NewGetOrderLogic(ctx, s.svcCtx)
	return l.GetOrder(in)
}

func (s *TradeServer) ListOrders(ctx context.Context, in *trade.ListOrdersRequest) (*trade.ListOrdersResponse, error) {
	l := logic.NewListOrdersLogic(ctx, s.svcCtx)
	return l.ListOrders(in)
}

func (s *TradeServer) CancelOrder(ctx context.Context, in *trade.CancelOrderRequest) (*trade.CancelOrderResponse, error) {
	l := logic.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

func (s *TradeServer) UpdateOrderStatus(ctx context.Context, in *trade.UpdateOrderStatusRequest) (*trade.UpdateOrderStatusResponse, error) {
	l := logic.NewUpdateOrderStatusLogic(ctx, s.svcCtx)
	return l.UpdateOrderStatus(in)
}

// 支付管理
func (s *TradeServer) ProcessPayment(ctx context.Context, in *trade.ProcessPaymentRequest) (*trade.ProcessPaymentResponse, error) {
	l := logic.NewProcessPaymentLogic(ctx, s.svcCtx)
	return l.ProcessPayment(in)
}

func (s *TradeServer) PaymentCallback(ctx context.Context, in *trade.PaymentCallbackRequest) (*trade.PaymentCallbackResponse, error) {
	l := logic.NewPaymentCallbackLogic(ctx, s.svcCtx)
	return l.PaymentCallback(in)
}

// 退款管理
func (s *TradeServer) CreateRefund(ctx context.Context, in *trade.CreateRefundRequest) (*trade.CreateRefundResponse, error) {
	l := logic.NewCreateRefundLogic(ctx, s.svcCtx)
	return l.CreateRefund(in)
}

func (s *TradeServer) GetRefund(ctx context.Context, in *trade.GetRefundRequest) (*trade.GetRefundResponse, error) {
	l := logic.NewGetRefundLogic(ctx, s.svcCtx)
	return l.GetRefund(in)
}

func (s *TradeServer) ListRefunds(ctx context.Context, in *trade.ListRefundsRequest) (*trade.ListRefundsResponse, error) {
	l := logic.NewListRefundsLogic(ctx, s.svcCtx)
	return l.ListRefunds(in)
}

func (s *TradeServer) ProcessRefund(ctx context.Context, in *trade.ProcessRefundRequest) (*trade.ProcessRefundResponse, error) {
	l := logic.NewProcessRefundLogic(ctx, s.svcCtx)
	return l.ProcessRefund(in)
}

// 账户管理
func (s *TradeServer) GetBalance(ctx context.Context, in *trade.GetBalanceRequest) (*trade.GetBalanceResponse, error) {
	l := logic.NewGetBalanceLogic(ctx, s.svcCtx)
	return l.GetBalance(in)
}

func (s *TradeServer) GetTransactions(ctx context.Context, in *trade.GetTransactionsRequest) (*trade.GetTransactionsResponse, error) {
	l := logic.NewGetTransactionsLogic(ctx, s.svcCtx)
	return l.GetTransactions(in)
}

// 报表管理
func (s *TradeServer) GetFinancialReport(ctx context.Context, in *trade.GetFinancialReportRequest) (*trade.GetFinancialReportResponse, error) {
	l := logic.NewGetFinancialReportLogic(ctx, s.svcCtx)
	return l.GetFinancialReport(in)
}
