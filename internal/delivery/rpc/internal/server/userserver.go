// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: user.proto

package server

import (
	"context"

	"wz-backend-go/internal/delivery/rpc/internal/logic"
	"wz-backend-go/internal/delivery/rpc/internal/svc"
	"wz-backend-go/internal/delivery/rpc/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// 用户注册
func (s *UserServer) Register(ctx context.Context, in *user.RegisterRequest) (*user.RegisterResponse, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 用户登录
func (s *UserServer) Login(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 获取用户信息
func (s *UserServer) GetUser(ctx context.Context, in *user.GetUserRequest) (*user.GetUserResponse, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

// 更新用户信息
func (s *UserServer) UpdateUser(ctx context.Context, in *user.UpdateUserRequest) (*user.UpdateUserResponse, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

// 验证用户
func (s *UserServer) VerifyUser(ctx context.Context, in *user.VerifyUserRequest) (*user.VerifyUserResponse, error) {
	l := logic.NewVerifyUserLogic(ctx, s.svcCtx)
	return l.VerifyUser(in)
}

// 企业认证
func (s *UserServer) VerifyCompany(ctx context.Context, in *user.VerifyCompanyRequest) (*user.VerifyCompanyResponse, error) {
	l := logic.NewVerifyCompanyLogic(ctx, s.svcCtx)
	return l.VerifyCompany(in)
}

// 获取用户行为分析
func (s *UserServer) GetUserBehavior(ctx context.Context, in *user.GetUserBehaviorRequest) (*user.GetUserBehaviorResponse, error) {
	l := logic.NewGetUserBehaviorLogic(ctx, s.svcCtx)
	return l.GetUserBehavior(in)
}
