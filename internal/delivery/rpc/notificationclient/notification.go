// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: notification.proto

package notificationclient

import (
	"context"

	"wz-backend-go/api/rpc/notification"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ListRequest      = notification.ListRequest
	ListResponse     = notification.ListResponse
	MarkReadRequest  = notification.MarkReadRequest
	MarkReadResponse = notification.MarkReadResponse
	NotificationItem = notification.NotificationItem
	SendRequest      = notification.SendRequest
	SendResponse     = notification.SendResponse

	Notification interface {
		// 发送通知
		Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
		// 获取通知列表
		List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
		// 标记通知为已读
		MarkRead(ctx context.Context, in *MarkReadRequest, opts ...grpc.CallOption) (*MarkReadResponse, error)
	}

	defaultNotification struct {
		cli zrpc.Client
	}
)

func NewNotification(cli zrpc.Client) Notification {
	return &defaultNotification{
		cli: cli,
	}
}

// 发送通知
func (m *defaultNotification) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.Send(ctx, in, opts...)
}

// 获取通知列表
func (m *defaultNotification) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

// 标记通知为已读
func (m *defaultNotification) MarkRead(ctx context.Context, in *MarkReadRequest, opts ...grpc.CallOption) (*MarkReadResponse, error) {
	client := notification.NewNotificationClient(m.cli.Conn())
	return client.MarkRead(ctx, in, opts...)
}
