// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: api/rpc/statistics.proto

package statistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Statistics_UserBehavior_FullMethodName      = "/statistics.Statistics/UserBehavior"
	Statistics_ContentPopularity_FullMethodName = "/statistics.Statistics/ContentPopularity"
	Statistics_HotContent_FullMethodName        = "/statistics.Statistics/HotContent"
	Statistics_UserProfile_FullMethodName       = "/statistics.Statistics/UserProfile"
)

// StatisticsClient is the client API for Statistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 统计服务
type StatisticsClient interface {
	// 获取用户行为统计
	UserBehavior(ctx context.Context, in *UserBehaviorRequest, opts ...grpc.CallOption) (*UserBehaviorResponse, error)
	// 获取内容流行度统计
	ContentPopularity(ctx context.Context, in *ContentPopularityRequest, opts ...grpc.CallOption) (*ContentPopularityResponse, error)
	// 获取热门内容
	HotContent(ctx context.Context, in *HotContentRequest, opts ...grpc.CallOption) (*HotContentResponse, error)
	// 获取用户画像
	UserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
}

type statisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsClient(cc grpc.ClientConnInterface) StatisticsClient {
	return &statisticsClient{cc}
}

func (c *statisticsClient) UserBehavior(ctx context.Context, in *UserBehaviorRequest, opts ...grpc.CallOption) (*UserBehaviorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserBehaviorResponse)
	err := c.cc.Invoke(ctx, Statistics_UserBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) ContentPopularity(ctx context.Context, in *ContentPopularityRequest, opts ...grpc.CallOption) (*ContentPopularityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContentPopularityResponse)
	err := c.cc.Invoke(ctx, Statistics_ContentPopularity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) HotContent(ctx context.Context, in *HotContentRequest, opts ...grpc.CallOption) (*HotContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HotContentResponse)
	err := c.cc.Invoke(ctx, Statistics_HotContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, Statistics_UserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServer is the server API for Statistics service.
// All implementations must embed UnimplementedStatisticsServer
// for forward compatibility.
//
// 统计服务
type StatisticsServer interface {
	// 获取用户行为统计
	UserBehavior(context.Context, *UserBehaviorRequest) (*UserBehaviorResponse, error)
	// 获取内容流行度统计
	ContentPopularity(context.Context, *ContentPopularityRequest) (*ContentPopularityResponse, error)
	// 获取热门内容
	HotContent(context.Context, *HotContentRequest) (*HotContentResponse, error)
	// 获取用户画像
	UserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error)
	mustEmbedUnimplementedStatisticsServer()
}

// UnimplementedStatisticsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatisticsServer struct{}

func (UnimplementedStatisticsServer) UserBehavior(context.Context, *UserBehaviorRequest) (*UserBehaviorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBehavior not implemented")
}
func (UnimplementedStatisticsServer) ContentPopularity(context.Context, *ContentPopularityRequest) (*ContentPopularityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContentPopularity not implemented")
}
func (UnimplementedStatisticsServer) HotContent(context.Context, *HotContentRequest) (*HotContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotContent not implemented")
}
func (UnimplementedStatisticsServer) UserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfile not implemented")
}
func (UnimplementedStatisticsServer) mustEmbedUnimplementedStatisticsServer() {}
func (UnimplementedStatisticsServer) testEmbeddedByValue()                    {}

// UnsafeStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServer will
// result in compilation errors.
type UnsafeStatisticsServer interface {
	mustEmbedUnimplementedStatisticsServer()
}

func RegisterStatisticsServer(s grpc.ServiceRegistrar, srv StatisticsServer) {
	// If the following call pancis, it indicates UnimplementedStatisticsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Statistics_ServiceDesc, srv)
}

func _Statistics_UserBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UserBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_UserBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UserBehavior(ctx, req.(*UserBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_ContentPopularity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentPopularityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).ContentPopularity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_ContentPopularity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).ContentPopularity(ctx, req.(*ContentPopularityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_HotContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).HotContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_HotContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).HotContent(ctx, req.(*HotContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Statistics_UserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Statistics_ServiceDesc is the grpc.ServiceDesc for Statistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Statistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statistics.Statistics",
	HandlerType: (*StatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserBehavior",
			Handler:    _Statistics_UserBehavior_Handler,
		},
		{
			MethodName: "ContentPopularity",
			Handler:    _Statistics_ContentPopularity_Handler,
		},
		{
			MethodName: "HotContent",
			Handler:    _Statistics_HotContent_Handler,
		},
		{
			MethodName: "UserProfile",
			Handler:    _Statistics_UserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rpc/statistics.proto",
}
