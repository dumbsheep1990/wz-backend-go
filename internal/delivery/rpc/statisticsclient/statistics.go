// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: statistics.proto

package statisticsclient

import (
	"context"

	"wz-backend-go/api/rpc/statistics"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ContentPopularityRequest  = statistics.ContentPopularityRequest
	ContentPopularityResponse = statistics.ContentPopularityResponse
	HotContentItem            = statistics.HotContentItem
	HotContentRequest         = statistics.HotContentRequest
	HotContentResponse        = statistics.HotContentResponse
	UserBehaviorRequest       = statistics.UserBehaviorRequest
	UserBehaviorResponse      = statistics.UserBehaviorResponse
	UserProfileRequest        = statistics.UserProfileRequest
	UserProfileResponse       = statistics.UserProfileResponse

	Statistics interface {
		// 获取用户行为统计
		UserBehavior(ctx context.Context, in *UserBehaviorRequest, opts ...grpc.CallOption) (*UserBehaviorResponse, error)
		// 获取内容流行度统计
		ContentPopularity(ctx context.Context, in *ContentPopularityRequest, opts ...grpc.CallOption) (*ContentPopularityResponse, error)
		// 获取热门内容
		HotContent(ctx context.Context, in *HotContentRequest, opts ...grpc.CallOption) (*HotContentResponse, error)
		// 获取用户画像
		UserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	}

	defaultStatistics struct {
		cli zrpc.Client
	}
)

func NewStatistics(cli zrpc.Client) Statistics {
	return &defaultStatistics{
		cli: cli,
	}
}

// 获取用户行为统计
func (m *defaultStatistics) UserBehavior(ctx context.Context, in *UserBehaviorRequest, opts ...grpc.CallOption) (*UserBehaviorResponse, error) {
	client := statistics.NewStatisticsClient(m.cli.Conn())
	return client.UserBehavior(ctx, in, opts...)
}

// 获取内容流行度统计
func (m *defaultStatistics) ContentPopularity(ctx context.Context, in *ContentPopularityRequest, opts ...grpc.CallOption) (*ContentPopularityResponse, error) {
	client := statistics.NewStatisticsClient(m.cli.Conn())
	return client.ContentPopularity(ctx, in, opts...)
}

// 获取热门内容
func (m *defaultStatistics) HotContent(ctx context.Context, in *HotContentRequest, opts ...grpc.CallOption) (*HotContentResponse, error) {
	client := statistics.NewStatisticsClient(m.cli.Conn())
	return client.HotContent(ctx, in, opts...)
}

// 获取用户画像
func (m *defaultStatistics) UserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	client := statistics.NewStatisticsClient(m.cli.Conn())
	return client.UserProfile(ctx, in, opts...)
}
