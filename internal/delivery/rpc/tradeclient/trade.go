// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: trade.proto

package tradeclient

import (
	"context"

	"wz-backend-go/api/rpc/trade"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BalanceItem                = trade.BalanceItem
	CancelOrderRequest         = trade.CancelOrderRequest
	CancelOrderResponse        = trade.CancelOrderResponse
	CreateOrderRequest         = trade.CreateOrderRequest
	CreateOrderResponse        = trade.CreateOrderResponse
	CreateRefundRequest        = trade.CreateRefundRequest
	CreateRefundResponse       = trade.CreateRefundResponse
	GetBalanceRequest          = trade.GetBalanceRequest
	GetBalanceResponse         = trade.GetBalanceResponse
	GetFinancialReportRequest  = trade.GetFinancialReportRequest
	GetFinancialReportResponse = trade.GetFinancialReportResponse
	GetOrderRequest            = trade.GetOrderRequest
	GetOrderResponse           = trade.GetOrderResponse
	GetRefundRequest           = trade.GetRefundRequest
	GetRefundResponse          = trade.GetRefundResponse
	GetTransactionsRequest     = trade.GetTransactionsRequest
	GetTransactionsResponse    = trade.GetTransactionsResponse
	ListOrdersRequest          = trade.ListOrdersRequest
	ListOrdersResponse         = trade.ListOrdersResponse
	ListRefundsRequest         = trade.ListRefundsRequest
	ListRefundsResponse        = trade.ListRefundsResponse
	Order                      = trade.Order
	PaymentCallbackRequest     = trade.PaymentCallbackRequest
	PaymentCallbackResponse    = trade.PaymentCallbackResponse
	ProcessPaymentRequest      = trade.ProcessPaymentRequest
	ProcessPaymentResponse     = trade.ProcessPaymentResponse
	ProcessRefundRequest       = trade.ProcessRefundRequest
	ProcessRefundResponse      = trade.ProcessRefundResponse
	Refund                     = trade.Refund
	ReportDataPoint            = trade.ReportDataPoint
	TransactionItem            = trade.TransactionItem
	UpdateOrderStatusRequest   = trade.UpdateOrderStatusRequest
	UpdateOrderStatusResponse  = trade.UpdateOrderStatusResponse

	Trade interface {
		// 订单管理
		CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
		ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
		CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
		UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
		// 支付管理
		ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
		PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error)
		// 退款管理
		CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error)
		GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error)
		ListRefunds(ctx context.Context, in *ListRefundsRequest, opts ...grpc.CallOption) (*ListRefundsResponse, error)
		ProcessRefund(ctx context.Context, in *ProcessRefundRequest, opts ...grpc.CallOption) (*ProcessRefundResponse, error)
		// 账户管理
		GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
		GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
		// 报表管理
		GetFinancialReport(ctx context.Context, in *GetFinancialReportRequest, opts ...grpc.CallOption) (*GetFinancialReportResponse, error)
	}

	defaultTrade struct {
		cli zrpc.Client
	}
)

func NewTrade(cli zrpc.Client) Trade {
	return &defaultTrade{
		cli: cli,
	}
}

// 订单管理
func (m *defaultTrade) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultTrade) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultTrade) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.ListOrders(ctx, in, opts...)
}

func (m *defaultTrade) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.CancelOrder(ctx, in, opts...)
}

func (m *defaultTrade) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.UpdateOrderStatus(ctx, in, opts...)
}

// 支付管理
func (m *defaultTrade) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.ProcessPayment(ctx, in, opts...)
}

func (m *defaultTrade) PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.PaymentCallback(ctx, in, opts...)
}

// 退款管理
func (m *defaultTrade) CreateRefund(ctx context.Context, in *CreateRefundRequest, opts ...grpc.CallOption) (*CreateRefundResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.CreateRefund(ctx, in, opts...)
}

func (m *defaultTrade) GetRefund(ctx context.Context, in *GetRefundRequest, opts ...grpc.CallOption) (*GetRefundResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.GetRefund(ctx, in, opts...)
}

func (m *defaultTrade) ListRefunds(ctx context.Context, in *ListRefundsRequest, opts ...grpc.CallOption) (*ListRefundsResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.ListRefunds(ctx, in, opts...)
}

func (m *defaultTrade) ProcessRefund(ctx context.Context, in *ProcessRefundRequest, opts ...grpc.CallOption) (*ProcessRefundResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.ProcessRefund(ctx, in, opts...)
}

// 账户管理
func (m *defaultTrade) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.GetBalance(ctx, in, opts...)
}

func (m *defaultTrade) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.GetTransactions(ctx, in, opts...)
}

// 报表管理
func (m *defaultTrade) GetFinancialReport(ctx context.Context, in *GetFinancialReportRequest, opts ...grpc.CallOption) (*GetFinancialReportResponse, error) {
	client := trade.NewTradeClient(m.cli.Conn())
	return client.GetFinancialReport(ctx, in, opts...)
}
