// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: user.proto

package userclient

import (
	"context"

	"wz-backend-go/internal/delivery/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetUserBehaviorRequest  = user.GetUserBehaviorRequest
	GetUserBehaviorResponse = user.GetUserBehaviorResponse
	GetUserRequest          = user.GetUserRequest
	GetUserResponse         = user.GetUserResponse
	LoginRequest            = user.LoginRequest
	LoginResponse           = user.LoginResponse
	RegisterRequest         = user.RegisterRequest
	RegisterResponse        = user.RegisterResponse
	UpdateUserRequest       = user.UpdateUserRequest
	UpdateUserResponse      = user.UpdateUserResponse
	UserBehavior            = user.UserBehavior
	VerifyCompanyRequest    = user.VerifyCompanyRequest
	VerifyCompanyResponse   = user.VerifyCompanyResponse
	VerifyUserRequest       = user.VerifyUserRequest
	VerifyUserResponse      = user.VerifyUserResponse

	User interface {
		// 用户注册
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 用户登录
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 获取用户信息
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		// 更新用户信息
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		// 验证用户
		VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error)
		// 企业认证
		VerifyCompany(ctx context.Context, in *VerifyCompanyRequest, opts ...grpc.CallOption) (*VerifyCompanyResponse, error)
		// 获取用户行为分析
		GetUserBehavior(ctx context.Context, in *GetUserBehaviorRequest, opts ...grpc.CallOption) (*GetUserBehaviorResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 用户注册
func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 用户登录
func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 获取用户信息
func (m *defaultUser) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

// 更新用户信息
func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

// 验证用户
func (m *defaultUser) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.VerifyUser(ctx, in, opts...)
}

// 企业认证
func (m *defaultUser) VerifyCompany(ctx context.Context, in *VerifyCompanyRequest, opts ...grpc.CallOption) (*VerifyCompanyResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.VerifyCompany(ctx, in, opts...)
}

// 获取用户行为分析
func (m *defaultUser) GetUserBehavior(ctx context.Context, in *GetUserBehaviorRequest, opts ...grpc.CallOption) (*GetUserBehaviorResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserBehavior(ctx, in, opts...)
}
