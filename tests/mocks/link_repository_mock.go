// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/links.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	"wz-backend-go/internal/domain"
	"reflect"
)

// MockLinkRepository is a mock of LinkRepository interface.
type MockLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLinkRepositoryMockRecorder
}

// MockLinkRepositoryMockRecorder is the mock recorder for MockLinkRepository.
type MockLinkRepositoryMockRecorder struct {
	mock *MockLinkRepository
}

// NewMockLinkRepository creates a new mock instance.
func NewMockLinkRepository(ctrl *gomock.Controller) *MockLinkRepository {
	mock := &MockLinkRepository{ctrl: ctrl}
	mock.recorder = &MockLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkRepository) EXPECT() *MockLinkRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLinkRepository) Create(link *domain.Link) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", link)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLinkRepositoryMockRecorder) Create(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLinkRepository)(nil).Create), link)
}

// GetByID mocks base method.
func (m *MockLinkRepository) GetByID(id int64) (*domain.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLinkRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLinkRepository)(nil).GetByID), id)
}

// List mocks base method.
func (m *MockLinkRepository) List(page, pageSize int, query map[string]interface{}) ([]*domain.Link, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", page, pageSize, query)
	ret0, _ := ret[0].([]*domain.Link)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockLinkRepositoryMockRecorder) List(page, pageSize, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLinkRepository)(nil).List), page, pageSize, query)
}

// Update mocks base method.
func (m *MockLinkRepository) Update(link *domain.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLinkRepositoryMockRecorder) Update(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLinkRepository)(nil).Update), link)
}

// Delete mocks base method.
func (m *MockLinkRepository) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLinkRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLinkRepository)(nil).Delete), id)
} 